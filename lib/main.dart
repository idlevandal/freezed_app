import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:freezed_app/models/todo.class.dart';
import 'package:freezed_app/models/user.class.dart';
import 'package:freezed_app/services/http_service.dart';

void main() {
  runApp(ProviderScope(child: const MyApp()));
}

enum TodoListFilter {
  all,
  completed,
  incomplete,
}

final todoListFilter = StateProvider<TodoListFilter>((_) => TodoListFilter.all);

final todosProvider = FutureProvider<List<Todo>>((_) async {
  final result = await getData('https://jsonplaceholder.typicode.com/todos');
  return result.map((res) => Todo.fromJson(res)).toList();
});

final todoWithUserProvider = FutureProvider<List<Todo>>((ref) async {
  print('todo with user was called!!!!!');
  final todos = await ref.watch(todosProvider.future);
  final result = await getData('https://jsonplaceholder.typicode.com/users');
  final users = result.map((user) => User.fromJson(user)).toList();

  // copyWith is auto-generated by freezed, thanks REMI...
  return todos.map((todo) => todo.copyWith(userName: users.firstWhere((el) => todo.userId == el.id).name)).toList();
});

final filteredTodos = FutureProvider<List<Todo>>((ref) async {
  final todos = await ref.watch(todoWithUserProvider.future);
  final filter = ref.watch(todoListFilter);
  print(filter);

  switch (filter) {
    case TodoListFilter.completed:
      return todos.where((todo) => todo.completed).toList();
    case TodoListFilter.incomplete:
      return todos.where((todo) => !todo.completed).toList();
    case TodoListFilter.all:
      return todos;
  }
});

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Root(),
    );
  }
}

class Root extends ConsumerWidget {
  final completedIcon = Icon(Icons.done, color: Colors.greenAccent);
  final incompleteIcon = Icon(Icons.close, color: Colors.red);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final _todos = ref.watch(filteredTodos);
    return Scaffold(
      appBar: AppBar(
        actions: [
          IconButton(
            onPressed: () {
              print('all pressed');
              ref.read(todoListFilter.state).state = TodoListFilter.all;
            },
            icon: Text('ALL'),
          ),
          IconButton(
            onPressed: () {
              print('completed pressed');
              ref.read(todoListFilter.state).state = TodoListFilter.completed;
            },
            icon: completedIcon,
          ),
          IconButton(
            onPressed: () {
              ref.read(todoListFilter.state).state = TodoListFilter.incomplete;
            },
            icon: incompleteIcon,
          ),
        ],
      ),
      body: Center(
        child: _todos.when(
          error: (err, stack) => Text(err.toString()),
          loading: () => CircularProgressIndicator.adaptive(),
          data: (data) {
            return ListView.builder(
              itemCount: data.length,
              itemBuilder: (context, index) {
                return Card(
                  child: ListTile(
                    title: Text('${data[index].userName}', style: TextStyle(color: Colors.blue)),
                    subtitle: Text('${data[index].title}'),
                    leading: data[index].completed ? completedIcon: incompleteIcon,
                  ),
                );
              },
            );
          }
        )
      ),
    );
  }
}


